package org.edgeComputing.ethereum;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AuctionManager extends Contract {
    public static final String BINARY = "6080604052600160048190556005805460ff1916909117905534801561002457600080fd5b50614607806100346000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f7e14b314610051578063966f63af14610066578063a163a62414610079578063e673daf414610081575b600080fd5b61006461005f366004613e1c565b610094565b005b610064610074366004613d39565b6103f0565b6100646109ea565b61006461008f366004613e04565b610b4f565b6100c9604051806040016040528060148152602001732922a3a4a9aa22a9102a2aa8262297171717171760611b815250610c5e565b6100d243610ca4565b6040518061016001604052808c81526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815250600660030160008d8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015590505060066002018b908060018154018082558091505060019003906000526020600020016000909190919091505561026c600660030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050610ce9565b60055460ff1661030e5761030e600660030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050610f5f565b6103a6600660030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820154815250506111d1565b600854604080518d815260208101929092527f43d87be5c821ce9205c5308d48e7c5ff9809ec56e0d83731a32cf20c0abea8fc910160405180910390a15050505050505050505050565b604051806101c001604052808681526020016000815260200160008152602001600081526020016000815260200185815260200160008152602001600081526020016000815260200160008152602001600081526020018481526020018381526020018281525060068001866040516104699190613eb9565b90815260200160405180910390206000820151816000019080519060200190610493929190613b92565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0155905050610554604051806040016040528060148152602001732922a3a4a9aa22a924a72390209029a2a92b22a960611b815250610c5e565b61055d43610ca4565b600b805460018101825560009190915285516105a0917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901906020880190613b92565b5060055460ff166106f3576106f360068001866040516105c09190613eb9565b9081526020016040518091039020604051806101c00160405290816000820180546105ea90614436565b80601f016020809104026020016040519081016040528092919081815260200182805461061690614436565b80156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d82015481525050611398565b836006600801866040516107079190613eb9565b9081526040519081900360200181209190915561085f90600c9061072c908890613eb9565b9081526020016040518091039020604051806101c001604052908160008201805461075690614436565b80601f016020809104026020016040519081016040528092919081815260200182805461078290614436565b80156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250506114d3565b6109a760068001866040516108749190613eb9565b9081526020016040518091039020604051806101c001604052908160008201805461089e90614436565b80601f01602080910402602001604051908101604052809291908181526020018280546108ca90614436565b80156109175780601f106108ec57610100808354040283529160200191610917565b820191906000526020600020905b8154815290600101906020018083116108fa57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505061160e565b600b546040517f320e32077009db58fcf01625ed48138c13ce7e8f383500cc4dab58f75191ee16916109db91889190614029565b60405180910390a15050505050565b610a206040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c5e565b610a566040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c5e565b610a8c6040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c5e565b610ac26040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c5e565b610af86040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c5e565b7f56f074d292557f2e3c567d982816e0fb5b72100ff196892f8fbd23b8a9073679604051610b45906020808252600b908201526a12195b1b1bc815dbdc9b1960aa1b604082015260600190565b60405180910390a1565b610b706040518060600160405280603c81526020016144c9603c9139610c5e565b610b7943610ca4565b60008181526013602052604090205460ff16610beb57610bc56040518060400160405280601581526020017418d85b18dd5b185d1a5b99c81d1a081c995cdd5b1d605a1b815250610c5e565b60055460ff1615610be057610bdb60068261172a565b610c16565b610bdb600682611b23565b610c166040518060400160405280600a8152602001691a1859081c995cdd5b1d60b21b815250610c5e565b6000818152601060205260409081902090517fde9a0fa21e2768362f2f416d0c5a00df95d7fc4a6e7c260e6eb437ef666e5d3191610c539161409b565b60405180910390a150565b610ca181604051602401610c729190613f44565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612c0f565b50565b610ca181604051602401610cba91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052612c0f565b60005b600b54811015610f5b576000604051806040016040528060066005018481548110610d2757634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610d3c90614436565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6890614436565b8015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b50505050508152602001610f35856006800160066005018781548110610deb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610e029190613ed5565b9081526020016040518091039020604051806101c0016040529081600082018054610e2c90614436565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5890614436565b8015610ea55780601f10610e7a57610100808354040283529160200191610ea5565b820191906000526020600020905b815481529060010190602001808311610e8857829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d82015481525050612c30565b8152509050610f48818460000151613062565b5080610f538161446b565b915050610cec565b5050565b60005b600b54811015610f5b5760006040518060400160405280846000015181526020016110f96006800160066005018681548110610fae57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610fc59190613ed5565b9081526020016040518091039020604051806101c0016040529081600082018054610fef90614436565b80601f016020809104026020016040519081016040528092919081815260200182805461101b90614436565b80156110685780601f1061103d57610100808354040283529160200191611068565b820191906000526020600020905b81548152906001019060200180831161104b57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d82015481525050866133ec565b81525090506111be816006600501848154811061112657634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461113b90614436565b80601f016020809104026020016040519081016040528092919081815260200182805461116790614436565b80156111b45780601f10611189576101008083540402835291602001916111b4565b820191906000526020600020905b81548152906001019060200180831161119757829003601f168201915b5050505050613498565b50806111c98161446b565b915050610f62565b60005b600b54811015610f5b57600b8054600091600c918490811061120657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161121d9190613ed5565b9081526020016040518091039020604051806101c001604052908160008201805461124790614436565b80601f016020809104026020016040519081016040528092919081815260200182805461127390614436565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505090506113578184613884565b8151604051600f9161136891613eb9565b908152604080516020928190038301902086516000908152925290205550806113908161446b565b9150506111d4565b60005b600854811015610f5b5760006040518060400160405280600660020184815481106113d657634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020016114ad85600660030160006006600201888154811061141557634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820154815250506133ec565b81525090506114c0818460000151613498565b50806114cb8161446b565b91505061139b565b60005b600854811015610f5b5760006040518060400160405280846000015181526020016115be600660030160006006600201878154811061152557634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152505086612c30565b81525090506115fb81600660020184815481106115eb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154613062565b50806116068161446b565b9150506114d6565b60005b600854811015610f5b576000600660030160006006600201848154811061164857634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152505090506116e78382613884565b8351604051600f916116f891613eb9565b9081526040805160209281900383019020935160009081529390915290912055806117228161446b565b915050611611565b600160005b6005840154811015611a6a576000838152600485016020526040812080548390811061176b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001805461178790614436565b80601f01602080910402602001604051908101604052809291908181526020018280546117b390614436565b80156118005780601f106117d557610100808354040283529160200191611800565b820191906000526020600020905b8154815290600101906020018083116117e357829003601f168201915b505050505090506000856009018260405161181b9190613eb9565b908152602001604051809103902060000160008681526020019081526020016000205490506118936040518060400160405280601081526020016f03a3ab83632902932b89036b4b8399d160851b81525082886008018560405161187f9190613eb9565b90815260200160405180910390205461394e565b6119066040518060400160405280601581526020017403134b2399d1039b2b93b32b916103a3ab836329d1605d1b81525087600601846040516118d69190613eb9565b9081526020016040518091039020600d01548860030160008981526020019081526020016000206005015461394e565b85600801826040516119189190613eb9565b908152602001604051809103902054811115801561196e57506000858152600387016020526040908190206005015490516006880190611959908590613eb9565b9081526020016040518091039020600d015411155b15611a55578086600801836040516119869190613eb9565b90815260200160405180910390205461199f91906143dc565b86600801836040516119b19190613eb9565b9081526040805160209281900383019020929092556000878152600a890182529190912083516119e392850190613b92565b50600b860180546001818101835560009283526020808420909201889055878352600d89018252604092839020805460ff191690911790558151808301909252601082526f020a9a9a4a3a2a722102a2aa826229d160851b90820152611a4a908684613995565b600093505050611a6a565b50508080611a629061446b565b91505061172f565b508015611b1e57611aaf6040518060400160405280601a81526020017f205455504c45206e6f742061737369676e656420617420616c6c000000000000815250610c5e565b600b830180546001818101835560009283526020808420909201859055848352600d860182526040808420805460ff19169092179091558051808201825260088152671393d51193d5539160c21b818401908152868552600a880190935292209151611b1c929190613b92565b505b505050565b8060005b6005840154811015611bde5783600801846005018281548110611b5a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051611b719190613ed5565b9081526020016040518091039020546000856005018381548110611ba557634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051611bbc9190613ed5565b9081526040519081900360200190205580611bd68161446b565b915050611b27565b50611c0460405180604001604052806004815260200163151154d560e21b815250610c5e565b611c2f6040518060400160405280600981526020016803a3ab83632a4a21d160bd1b815250836139dc565b600060019050600080604051806020016040528060008152509050611c7a6040518060400160405280600f81526020016e7768657265206974206661696c733f60881b815250610c5e565b6005860154611c8890610ca4565b6002860154611c9690610ca4565b60005b600587015481101561267657611cc86040518060600160405280602181526020016145b160219139878361394e565b6000868152600488016020526040902054611ce290610ca4565b600086815260048801602052604090208054611d2e919083908110611d1757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154610ca4565b60008681526004880160205260408120805483908110611d5e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000018054611d7a90614436565b80601f0160208091040260200160405190810160405280929190818152602001828054611da690614436565b8015611df35780601f10611dc857610100808354040283529160200191611df3565b820191906000526020600020905b815481529060010190602001808311611dd657829003601f168201915b50505050509050611e286040518060400160405280600c81526020016b039b2b93b32b92730b6b29d160a51b81525082613a21565b60008860090182604051611e3c9190613eb9565b90815260200160405180910390206000016000898152602001908152602001600020549050611e986040518060400160405280600a81526020016903932b89036b4b8399d160b51b8152508260008560405161187f9190613eb9565b611efc6040518060400160405280600681526020016503134b2399d160d51b8152508a60060184604051611ecc9190613eb9565b9081526020016040518091039020600d01548b60030160008c81526020019081526020016000206005015461394e565b600082604051611f0c9190613eb9565b9081526020016040518091039020548111158015611f625750600088815260038a0160205260409081902060050154905160068b0190611f4d908590613eb9565b9081526020016040518091039020600d015411155b156126615780600083604051611f789190613eb9565b908152602001604051809103902054611f9191906143dc565b600083604051611fa19190613eb9565b9081526020016040518091039020819055506120106040518060400160405280601881526020017f6e6577207365727665722071756f74612061667465723a200000000000000000815250600084604051611ffc9190613eb9565b9081526020016040518091039020546139dc565b6000888152600160209081526040909120835161202f92850190613b92565b506000955060005b60028a01548110156120eb5760008a600701846040516120579190613eb9565b9081526020016040518091039020828154811061208457634e487b7160e01b600052603260045260246000fd5b60009182526020808320600290920290910154808352601390915260409091205490915060ff166120d857808b600e01856040516120c29190613eb9565b90815260405190819003602001902055506120eb565b50806120e38161446b565b915050612037565b5061212260405180604001604052806015815260200174747279696e6720746f2066696e6420636972636c6560581b815250610c5e565b8161212f60026000613c16565b600280546001810182556000919091528151612172917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01906020840190613b92565b5061217f60036000613c34565b6121b16040518060400160405280601081526020016f039b2b93b32b92937bab73234b7339d160851b81525082613a21565b89600e01816040516121c39190613eb9565b90815260200160405180910390205460001461262a576122176040518060400160405280601081526020016f03a3ab83632903937bab73234b7339d160851b8152508b600e0183604051611ffc9190613eb9565b60008a600e018260405161222b9190613eb9565b908152602001604051809103902054905060005b6003548110156122d9576003818154811061226a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548214156122c7576122bb6040518060400160405280601981526020017f666f756e6420636972636c652077697468207475706c653a2000000000000000815250836139dc565b600197508296506122d9565b806122d18161446b565b91505061223f565b50600380546001818101835560009283527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018390556040518290600e8f0190612326908790613eb9565b9081526020016040518091039020548152602001908152602001600020805461234e90614436565b9050111561261e57600160008c600e018460405161236c9190613eb9565b9081526020016040518091039020548152602001908152602001600020805461239490614436565b80601f01602080910402602001604051908101604052809291908181526020018280546123c090614436565b801561240d5780601f106123e25761010080835404028352916020019161240d565b820191906000526020600020905b8154815290600101906020018083116123f057829003601f168201915b5050505050915060005b6002548110156125c8576125036040518060400160405280600c81526020016b031b7b6b830b9329313131d160a51b815250846002848154811061246b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461248090614436565b80601f01602080910402602001604051908101604052809291908181526020018280546124ac90614436565b80156124f95780601f106124ce576101008083540402835291602001916124f9565b820191906000526020600020905b8154815290600101906020018083116124dc57829003601f168201915b5050505050613a66565b6002818154811061252457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405160200161253e9190613ed5565b60405160208183030381529060405280519060200120836040516020016125659190613eb9565b6040516020818303038152906040528051906020012014156125b6576125aa604051806040016040528060088152602001677761732073616d6560c01b815250610c5e565b600197508296506125c8565b806125c08161446b565b915050612417565b5086156125d5575061262a565b600280546001810182556000919091528251612618917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01906020850190613b92565b50612624565b5061262a565b5061217f565b6126596040518060400160405280600d81526020016c03337bab73221b4b931b6329d1609d1b81525087613aad565b505050612676565b5050808061266e9061446b565b915050611c99565b508115612ade57600086600e01826040516126919190613eb9565b90815260200160405180910390205490506126e06040518060400160405280601e81526020017f41737369676e696e6720666f756e64696e67732068657265203d3d3d3d200000815250610c5e565b6000818152600160209081526040808320600a8b01909252909120815490919061270990614436565b612714929190613c52565b50600b870180546001818101835560009283526020808420909201849055838352600d8a0182526040808420805460ff191690921790915580518082018252601081526f020a9a9a4a3a2a722102a2aa826229d160851b81840152848452600a8b0190925290912080546128119291849161278e90614436565b80601f01602080910402602001604051908101604052809291908181526020018280546127ba90614436565b80156128075780601f106127dc57610100808354040283529160200191612807565b820191906000526020600020905b8154815290600101906020018083116127ea57829003601f168201915b5050505050613995565b600081815260016020526040808220905160098a019161283091613ed5565b90815260408051918290036020908101832060008b815290825282812054868252600190925291909120909250829160088b019161286d91613ed5565b90815260200160405180910390205461288691906143dc565b60008381526001602052604090819020905160088b01916128a691613ed5565b9081526020016040518091039020819055506129ac6040518060400160405280600b81526020016a02a32b6b81028baba309d160ad1b8152506001600085815260200190815260200160002080546128fd90614436565b80601f016020809104026020016040519081016040528092919081815260200182805461292990614436565b80156129765780601f1061294b57610100808354040283529160200191612976565b820191906000526020600020905b81548152906001019060200180831161295957829003601f168201915b5050506000878152600160205260408082209051919350612998925090613ed5565b908152602001604051809103902054613af2565b6129fb6040518060400160405280600e81526020016d028aaaa209021a420a723a2a21d160951b815250828a6008016001600087815260200190815260200160002060405161187f9190613ed5565b82604051602001612a0c9190613eb9565b60408051601f198184030181528282528051602091820120600086815260018352929092209192612a3e929101613ed5565b604051602081830303815290604052805190602001201415612a9e57612a986040518060400160405280601881526020017f627265616b696e672074686520636972636c6520686572650000000000000000815250610c5e565b50612ad5565b600082815260016020526040908190209051600e8a0191612abe91613ed5565b9081526020016040518091039020549150506126e0565b50505050612bc8565b8215612b8f57612b226040518060400160405280601a81526020017f205455504c45206e6f742061737369676e656420617420616c6c000000000000815250610c5e565b600b860180546001818101835560009283526020808420909201889055878352600d890182526040808420805460ff19169092179091558051808201825260088152671393d51193d5539160c21b818401908152898552600a8b0190935292209151612ad5929190613b92565b600085815260016020526040908190209051600e880191612baf91613ed5565b9081526020016040518091039020549450505050611c2f565b6000818152600d8401602052604090205460ff1615612be657505050565b612c076040518060600160405280602c8152602001614530602c9139610c5e565b809150611c04565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080600280846101800151866101000151612c4c919061439d565b612c5691906142ec565b60028561016001518760e00151612c6d919061439d565b612c7791906142ec565b612c81919061411c565b612c8b91906142ec565b90506000612e7c8286610120015164746a528800612ca991906142fb565b612cb39190614175565b612cbe90600161411c565b604080517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616818301527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e0820152610100808201909252600160f81b6001600160801b68010000000000000000640100000000620100006010600460026000198c019081041790810417908104178881041790810417908104179081041790810417017e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff0281900460ff039091015104600160ff1b909211020190565b905060008560c0015182612e90919061437e565b6040870151612ea290620f424061437e565b612eac91906141a3565b905060008560a001518760200151620f4240612ec8919061437e565b612ed291906141a3565b9050600087608001518284612ee7919061415d565b612ef191906141a3565b905060008861014001518961012001516103e8612f0e919061437e565b612f18919061415d565b8960800151612f27919061437e565b6101408a0151612f37908561437e565b6101208b0151612f47908761437e565b612f53906103e861437e565b612f5d919061415d565b612f6791906141a3565b90506000886101a001516103e8612f7e919061437e565b612f88838561415d565b612f92919061415d565b9050612fb9604051806060016040528060298152602001614588602991398b518b51613995565b612fe56040518060400160405280600a81526020016903a34b5103737b9369d160b51b815250846139dc565b6130116040518060400160405280600a815260200169032b4b5103737b9369d160b51b815250836139dc565b6130536040518060400160405280600e81526020016d039b2b93b32b91027b33332b91d160951b8152508a6101a001516103e861304e919061437e565b6139dc565b96505050505050505b92915050565b6130846040518060600160405280602b8152602001614505602b9139826139dc565b6130bb6040518060400160405280600c81526020016b0313637b1b59024a723279d160a51b81525083600001518460200151613af2565b6000818152600a602090815260408220805460018101825590835291819020845180518694600202909201926130f692849290910190613b92565b506020918201516001918201556000838152600a909252604090912054141561314f57610f5b604051806040016040528060158152602001741a5b9a5d1a585b081c1c9a5bdc9a5d1e4818dbdcdd605a1b815250610c5e565b60005b6000828152600a602052604090205461316d906001906143dc565b81101561325c576131fa6040518060400160405280601a81526020017f696e646578206f6620736572766572207072696f726974793a20000000000000815250826006600401600086815260200190815260200160002084815481106131e357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015461394e565b6000828152600a6020526040902080548290811061322857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101548360200151101561324a5761325c565b806132548161446b565b915050613152565b61329460405180604001604052806016815260200175036bab9ba1034b739b2b93a1030ba1034b73232bc1d160551b815250826139dc565b6000828152600a60205260408120546132af906001906143dc565b90505b8181111561337d576000838152600a602052604090206132d36001836143dc565b815481106132f157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160066004016000858152602001908152602001600020828154811061333457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600082018160000190805461335690614436565b613361929190613c52565b50600191820154910155806133758161441f565b9150506132b2565b506000828152600a602052604090208054849190839081106133af57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160008201518160000190805190602001906133d9929190613b92565b5060208201518160010155905050505050565b6000806002846101800151846101000151613407919061439d565b61341191906142ec565b60028561016001518560e00151613428919061439d565b61343291906142ec565b61343c919061411c565b9050600061344982613b39565b6134559061093561437e565b60a0850151613466906103e861437e565b61347390620f424061415d565b61347d91906143dc565b6fffffffffffffffffffffffffffffffff1695945050505050565b6134ba6040518060600160405280602c815260200161455c602c913982613a21565b6134f16040518060400160405280600c81526020016b0313637b1b59024a723279d160a51b8152508360000151846020015161394e565b604051600d90613502908390613eb9565b9081526040519081900360209081018220805460018181018355600092835291839020865160029092020190815591850151910155600d90613545908390613eb9565b908152604051908190036020019020546001141561359357610f5b604051806040016040528060158152602001741a5b9a5d1a585b081c1c9a5bdc9a5d1e4818dbdcdd605a1b815250610c5e565b60005b60016006600701836040516135ab9190613eb9565b908152604051908190036020019020546135c591906143dc565b8110156136e3576136466040518060400160405280601a81526020017f696e646578206f6620736572766572207072696f726974793a20000000000000815250826006600701856040516136199190613eb9565b908152602001604051809103902084815481106131e357634e487b7160e01b600052603260045260246000fd5b6136726040518060400160405280600a815260200169010101010103337b91d160b51b81525083613a21565b604051600d90613683908490613eb9565b908152602001604051809103902081815481106136b057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101548360200151106136d1576136e3565b806136db8161446b565b915050613596565b61371b60405180604001604052806016815260200175036bab9ba1034b739b2b93a1030ba1034b73232bc1d160551b815250826139dc565b600060016006600701846040516137329190613eb9565b9081526040519081900360200190205461374c91906143dc565b90505b8181111561381e57604051600d90613768908590613eb9565b9081526040519081900360200190206137826001836143dc565b815481106137a057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016006600701846040516137c19190613eb9565b908152602001604051809103902082815481106137ee57634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600290920201908155600191820154910155806138168161441f565b91505061374f565b50826006600701836040516138339190613eb9565b9081526020016040518091039020828154811061386057634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050565b6000806002808561018001518561010001516138a0919061439d565b6138aa91906142ec565b60028661016001518660e001516138c1919061439d565b6138cb91906142ec565b6138d5919061411c565b6138df91906142ec565b905060006138fd8285610120015164746a528800612ca991906142fb565b905060008460c0015182613911919061437e565b856040015161392091906141a3565b9050600081866080015161393491906143dc565b866020015161394391906141a3565b979650505050505050565b611b1e83838360405160240161396693929190614076565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052612c0f565b611b1e8383836040516024016139ad9392919061404b565b60408051601f198184030181529190526020810180516001600160e01b031663a3f5c73960e01b179052612c0f565b610f5b82826040516024016139f2929190614029565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612c0f565b610f5b8282604051602401613a37929190613f82565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052612c0f565b611b1e838383604051602401613a7e93929190613fb0565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b179052612c0f565b610f5b8282604051602401613ac3929190613f5e565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052612c0f565b611b1e838383604051602401613b0a93929190613ff3565b60408051601f198184030181529190526020810180516001600160e01b031663f362ca5960e01b179052612c0f565b6000806002613b4984600161415d565b613b5391906141a3565b90508291505b81811015613b8c57905080600281613b7181866141a3565b613b7b919061415d565b613b8591906141a3565b9050613b59565b50919050565b828054613b9e90614436565b90600052602060002090601f016020900481019282613bc05760008555613c06565b82601f10613bd957805160ff1916838001178555613c06565b82800160010185558215613c06579182015b82811115613c06578251825591602001919060010190613beb565b50613c12929150613ccd565b5090565b5080546000825590600052602060002090810190610ca19190613ce2565b5080546000825590600052602060002090810190610ca19190613ccd565b828054613c5e90614436565b90600052602060002090601f016020900481019282613c805760008555613c06565b82601f10613c915780548555613c06565b82800160010185558215613c0657600052602060002091601f016020900482015b82811115613c06578254825591600101919060010190613cb2565b5b80821115613c125760008155600101613cce565b80821115613c12576000613cf68282613cff565b50600101613ce2565b508054613d0b90614436565b6000825580601f10613d1b575050565b601f016020900490600052602060002090810190610ca19190613ccd565b600080600080600060a08688031215613d50578081fd5b853567ffffffffffffffff80821115613d67578283fd5b818801915088601f830112613d7a578283fd5b813581811115613d8c57613d8c6144b2565b604051601f8201601f19908116603f01168101908382118183101715613db457613db46144b2565b816040528281528b6020848701011115613dcc578586fd5b826020860160208301379182016020908101959095525099928801359850505060408601359560608101359550608001359350915050565b600060208284031215613e15578081fd5b5035919050565b60008060008060008060008060008060006101608c8e031215613e3d578586fd5b505089359b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0810135965061010081013595506101208101359450610140013592509050565b60008151808452613ea58160208601602086016143f3565b601f01601f19169290920160200192915050565b60008251613ecb8184602087016143f3565b9190910192915050565b6000808354613ee381614436565b60018281168015613efb5760018114613f0c57613f38565b60ff19841687528287019450613f38565b8786526020808720875b85811015613f2f5781548a820152908401908201613f16565b50505082870194505b50929695505050505050565b602081526000613f576020830184613e8d565b9392505050565b604081526000613f716040830185613e8d565b905082151560208301529392505050565b604081526000613f956040830185613e8d565b8281036020840152613fa78185613e8d565b95945050505050565b606081526000613fc36060830186613e8d565b8281036020840152613fd58186613e8d565b90508281036040840152613fe98185613e8d565b9695505050505050565b6060815260006140066060830186613e8d565b82810360208401526140188186613e8d565b915050826040830152949350505050565b60408152600061403c6040830185613e8d565b90508260208301529392505050565b60608152600061405e6060830186613e8d565b8460208401528281036040840152613fe98185613e8d565b6060815260006140896060830186613e8d565b60208301949094525060400152919050565b600060208083528184546140ae81614436565b808487015260406001808416600081146140cf57600181146140e35761410e565b60ff1985168984015260608901955061410e565b898852868820885b858110156141065781548b82018601529083019088016140eb565b8a0184019650505b509398975050505050505050565b600080821280156001600160ff1b038490038513161561413e5761413e614486565b600160ff1b839003841281161561415757614157614486565b50500190565b6000821982111561417057614170614486565b500190565b6000826141845761418461449c565b600160ff1b82146000198414161561419e5761419e614486565b500590565b6000826141b2576141b261449c565b500490565b80825b60018086116141c957506141fc565b6001600160ff1b038290048211156141e3576141e3614486565b808616156141f057918102915b9490941c9380026141ba565b935093915050565b600082801561421a57600181146142245761422d565b600191505061305c565b8291505061305c565b508161423b5750600061305c565b506001600082138082146142545780156142735761428d565b6001600160ff1b0383900483111561426e5761426e614486565b61428d565b6001600160ff1b0383900583121561428d5761428d614486565b50808316156142995750805b6142a98360011c838402836141b7565b600082136001600160ff1b03829004831116156142c8576142c8614486565b60008212600160ff1b829005831216156142e4576142e4614486565b029392505050565b6000613f5760ff841683614204565b60006001600160ff1b038184138284138082168684048611161561432157614321614486565b600160ff1b8487128281168783058912161561433f5761433f614486565b85871292508782058712848416161561435a5761435a614486565b8785058712818416161561437057614370614486565b505050929093029392505050565b600081600019048311821515161561439857614398614486565b500290565b60008083128015600160ff1b8501841216156143bb576143bb614486565b6001600160ff1b03840183138116156143d6576143d6614486565b50500390565b6000828210156143ee576143ee614486565b500390565b60005b8381101561440e5781810151838201526020016143f6565b83811115611b1c5750506000910152565b60008161442e5761442e614486565b506000190190565b600181811c9082168061444a57607f821691505b60208210811415613b8c57634e487b7160e01b600052602260045260246000fd5b600060001982141561447f5761447f614486565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a20524553554c54202a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a262626262620616464696e67206e6577207072696f7269747920626c6f636b20666f72207475706c653a20494e495449414c205455504c4520574153204e4f54204153534947454e44205354415254494e47204f564552262626262620616464696e67206e6577207072696f7269747920626c6f636b20666f72207365727665723a202a2a2a2a2a2a2a2a2a2a2a2a2a2a207475706c65436f73743a207365727665722c207475706c653a206265666f726520666f72206c6f6f70207475706c65207072696f72697469657320a26469706673582212203de211fdeb63ea9d307ce3a657b018e786067063d5cee64ab903da1dbf85c36c64736f6c63430008040033";

    public static final String FUNC_TEST = "Test";

    public static final String FUNC_AUCTIONRESULTTUPLE = "auctionResultTuple";

    public static final String FUNC_REGISTERMOBILETASK = "registerMobileTask";

    public static final String FUNC_REGISTERSERVERNODE = "registerServerNode";

    public static final Event AUCTIONTUPLERESULT_EVENT = new Event("AuctionTupleResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGBOOL_EVENT = new Event("DebugBool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DEBUGEVENT_EVENT = new Event("DebugEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGUINT_EVENT = new Event("DebugUint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MOBILETASKREGISTERED_EVENT = new Event("MobileTaskRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVERNODEREGISTERED_EVENT = new Event("ServerNodeRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AuctionTupleResultEventResponse> getAuctionTupleResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, transactionReceipt);
        ArrayList<AuctionTupleResultEventResponse> responses = new ArrayList<AuctionTupleResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionTupleResultEventResponse>() {
            @Override
            public AuctionTupleResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, log);
                AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
                typedResponse.log = log;
                typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONTUPLERESULT_EVENT));
        return auctionTupleResultEventFlowable(filter);
    }

    public List<DebugBoolEventResponse> getDebugBoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGBOOL_EVENT, transactionReceipt);
        ArrayList<DebugBoolEventResponse> responses = new ArrayList<DebugBoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugBoolEventResponse>() {
            @Override
            public DebugBoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGBOOL_EVENT, log);
                DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
                typedResponse.log = log;
                typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGBOOL_EVENT));
        return debugBoolEventFlowable(filter);
    }

    public List<DebugEventEventResponse> getDebugEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGEVENT_EVENT, transactionReceipt);
        ArrayList<DebugEventEventResponse> responses = new ArrayList<DebugEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugEventEventResponse typedResponse = new DebugEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugEventEventResponse>() {
            @Override
            public DebugEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGEVENT_EVENT, log);
                DebugEventEventResponse typedResponse = new DebugEventEventResponse();
                typedResponse.log = log;
                typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGEVENT_EVENT));
        return debugEventEventFlowable(filter);
    }

    public List<DebugUintEventResponse> getDebugUintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGUINT_EVENT, transactionReceipt);
        ArrayList<DebugUintEventResponse> responses = new ArrayList<DebugUintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugUintEventResponse typedResponse = new DebugUintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugUintEventResponse>() {
            @Override
            public DebugUintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGUINT_EVENT, log);
                DebugUintEventResponse typedResponse = new DebugUintEventResponse();
                typedResponse.log = log;
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGUINT_EVENT));
        return debugUintEventFlowable(filter);
    }

    public List<MobileTaskRegisteredEventResponse> getMobileTaskRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, transactionReceipt);
        ArrayList<MobileTaskRegisteredEventResponse> responses = new ArrayList<MobileTaskRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MobileTaskRegisteredEventResponse>() {
            @Override
            public MobileTaskRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, log);
                MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MOBILETASKREGISTERED_EVENT));
        return mobileTaskRegisteredEventFlowable(filter);
    }

    public List<ServerNodeRegisteredEventResponse> getServerNodeRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, transactionReceipt);
        ArrayList<ServerNodeRegisteredEventResponse> responses = new ArrayList<ServerNodeRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServerNodeRegisteredEventResponse>() {
            @Override
            public ServerNodeRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, log);
                ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVERNODEREGISTERED_EVENT));
        return serverNodeRegisteredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> Test() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> auctionResultTuple(BigInteger tupleID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUCTIONRESULTTUPLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tupleID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerMobileTask(BigInteger id, BigInteger cpuLength, BigInteger nwLength, BigInteger outputSize, BigInteger deadline, BigInteger offer, BigInteger ueUpBW, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger ueTransmissionPower, BigInteger ueIdlePower) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERMOBILETASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(cpuLength), 
                new org.web3j.abi.datatypes.generated.Uint256(nwLength), 
                new org.web3j.abi.datatypes.generated.Uint256(outputSize), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint256(offer), 
                new org.web3j.abi.datatypes.generated.Uint256(ueUpBW), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(ueTransmissionPower), 
                new org.web3j.abi.datatypes.generated.Uint256(ueIdlePower)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerServerNode(String name, BigInteger mips, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger offer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERSERVERNODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.generated.Uint256(mips), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(offer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AuctionTupleResultEventResponse extends BaseEventResponse {
        public String serverName;
    }

    public static class DebugBoolEventResponse extends BaseEventResponse {
        public Boolean bbb;
    }

    public static class DebugEventEventResponse extends BaseEventResponse {
        public String text;
    }

    public static class DebugUintEventResponse extends BaseEventResponse {
        public BigInteger number;
    }

    public static class MobileTaskRegisteredEventResponse extends BaseEventResponse {
        public BigInteger id;

        public BigInteger biddersCount;
    }

    public static class ServerNodeRegisteredEventResponse extends BaseEventResponse {
        public String name;

        public BigInteger biddersCount;
    }
}
