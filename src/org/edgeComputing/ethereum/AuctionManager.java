package org.edgeComputing.ethereum;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AuctionManager extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_TEST = "Test";

    public static final String FUNC_AUCTIONRESULTTUPLE = "auctionResultTuple";

    public static final String FUNC_REGISTERMOBILETASK = "registerMobileTask";

    public static final String FUNC_REGISTERSERVERNODE = "registerServerNode";

    public static final Event AUCTIONTUPLERESULT_EVENT = new Event("AuctionTupleResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGBOOL_EVENT = new Event("DebugBool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DEBUGEVENT_EVENT = new Event("DebugEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGUINT_EVENT = new Event("DebugUint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MOBILETASKREGISTERED_EVENT = new Event("MobileTaskRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVERNODEREGISTERED_EVENT = new Event("ServerNodeRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AuctionTupleResultEventResponse> getAuctionTupleResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, transactionReceipt);
        ArrayList<AuctionTupleResultEventResponse> responses = new ArrayList<AuctionTupleResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionTupleResultEventResponse>() {
            @Override
            public AuctionTupleResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, log);
                AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
                typedResponse.log = log;
                typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONTUPLERESULT_EVENT));
        return auctionTupleResultEventFlowable(filter);
    }

    public List<DebugBoolEventResponse> getDebugBoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGBOOL_EVENT, transactionReceipt);
        ArrayList<DebugBoolEventResponse> responses = new ArrayList<DebugBoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugBoolEventResponse>() {
            @Override
            public DebugBoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGBOOL_EVENT, log);
                DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
                typedResponse.log = log;
                typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGBOOL_EVENT));
        return debugBoolEventFlowable(filter);
    }

    public List<DebugEventEventResponse> getDebugEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGEVENT_EVENT, transactionReceipt);
        ArrayList<DebugEventEventResponse> responses = new ArrayList<DebugEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugEventEventResponse typedResponse = new DebugEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugEventEventResponse>() {
            @Override
            public DebugEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGEVENT_EVENT, log);
                DebugEventEventResponse typedResponse = new DebugEventEventResponse();
                typedResponse.log = log;
                typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGEVENT_EVENT));
        return debugEventEventFlowable(filter);
    }

    public List<DebugUintEventResponse> getDebugUintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGUINT_EVENT, transactionReceipt);
        ArrayList<DebugUintEventResponse> responses = new ArrayList<DebugUintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugUintEventResponse typedResponse = new DebugUintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugUintEventResponse>() {
            @Override
            public DebugUintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGUINT_EVENT, log);
                DebugUintEventResponse typedResponse = new DebugUintEventResponse();
                typedResponse.log = log;
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGUINT_EVENT));
        return debugUintEventFlowable(filter);
    }

    public List<MobileTaskRegisteredEventResponse> getMobileTaskRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, transactionReceipt);
        ArrayList<MobileTaskRegisteredEventResponse> responses = new ArrayList<MobileTaskRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MobileTaskRegisteredEventResponse>() {
            @Override
            public MobileTaskRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, log);
                MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MOBILETASKREGISTERED_EVENT));
        return mobileTaskRegisteredEventFlowable(filter);
    }

    public List<ServerNodeRegisteredEventResponse> getServerNodeRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, transactionReceipt);
        ArrayList<ServerNodeRegisteredEventResponse> responses = new ArrayList<ServerNodeRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServerNodeRegisteredEventResponse>() {
            @Override
            public ServerNodeRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, log);
                ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVERNODEREGISTERED_EVENT));
        return serverNodeRegisteredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> Test() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> auctionResultTuple(BigInteger tupleID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUCTIONRESULTTUPLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tupleID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerMobileTask(BigInteger id, BigInteger cpuLength, BigInteger nwLength, BigInteger outputSize, BigInteger deadline, BigInteger offer, BigInteger ueUpBW, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger ueTransmissionPower, BigInteger ueIdlePower) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERMOBILETASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(cpuLength), 
                new org.web3j.abi.datatypes.generated.Uint256(nwLength), 
                new org.web3j.abi.datatypes.generated.Uint256(outputSize), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint256(offer), 
                new org.web3j.abi.datatypes.generated.Uint256(ueUpBW), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(ueTransmissionPower), 
                new org.web3j.abi.datatypes.generated.Uint256(ueIdlePower)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerServerNode(String name, BigInteger mips, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger offer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERSERVERNODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.generated.Uint256(mips), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(offer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AuctionTupleResultEventResponse extends BaseEventResponse {
        public String serverName;
    }

    public static class DebugBoolEventResponse extends BaseEventResponse {
        public Boolean bbb;
    }

    public static class DebugEventEventResponse extends BaseEventResponse {
        public String text;
    }

    public static class DebugUintEventResponse extends BaseEventResponse {
        public BigInteger number;
    }

    public static class MobileTaskRegisteredEventResponse extends BaseEventResponse {
        public BigInteger id;

        public BigInteger biddersCount;
    }

    public static class ServerNodeRegisteredEventResponse extends BaseEventResponse {
        public String name;

        public BigInteger biddersCount;
    }
}
