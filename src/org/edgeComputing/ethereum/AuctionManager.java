package org.edgeComputing.ethereum;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AuctionManager extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50613ce2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f7e14b314610051578063966f63af14610066578063a163a62414610079578063e673daf414610081575b600080fd5b61006461005f36600461351c565b610094565b005b610064610074366004613439565b6103dc565b6100646109c6565b61006461008f366004613504565b610b2b565b6100c9604051806040016040528060148152602001732922a3a4a9aa22a9102a2aa8262297171717171760611b815250610c1b565b6040518061016001604052808c81526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815250600260030160008d8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0155905050600280018b9080600181540180825580915050600190039060005260206000200160009091909190915055610262600260030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050610c61565b6102fa600260030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050610ed8565b610392600260030160008d81526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152505061114b565b600454604080518d815260208101929092527f43d87be5c821ce9205c5308d48e7c5ff9809ec56e0d83731a32cf20c0abea8fc910160405180910390a15050505050505050505050565b604051806101c001604052808681526020016000815260200160008152602001600081526020016000815260200185815260200160008152602001600081526020016000815260200160008152602001600081526020018481526020018381526020018281525060026006018660405161045691906135b9565b90815260200160405180910390206000820151816000019080519060200190610480929190613325565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0155905050610541604051806040016040528060148152602001732922a3a4a9aa22a924a72390209029a2a92b22a960611b815250610c1b565b600780546001810182556000919091528551610584917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801906020880190613325565b506106ce60026006018660405161059b91906135b9565b9081526020016040518091039020604051806101c00160405290816000820180546105c590613b3a565b80601f01602080910402602001604051908101604052809291908181526020018280546105f190613b3a565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d82015481525050611312565b836002600801866040516106e291906135b9565b9081526040519081900360200181209190915561083a906008906107079088906135b9565b9081526020016040518091039020604051806101c001604052908160008201805461073190613b3a565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90613b3a565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505061144b565b61098360026006018660405161085091906135b9565b9081526020016040518091039020604051806101c001604052908160008201805461087a90613b3a565b80601f01602080910402602001604051908101604052809291908181526020018280546108a690613b3a565b80156108f35780601f106108c8576101008083540402835291602001916108f3565b820191906000526020600020905b8154815290600101906020018083116108d657829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d82015481525050611584565b6007546040517f320e32077009db58fcf01625ed48138c13ce7e8f383500cc4dab58f75191ee16916109b791889190613729565b60405180910390a15050505050565b6109fc6040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c1b565b610a326040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c1b565b610a686040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c1b565b610a9e6040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c1b565b610ad46040518060400160405280601581526020017468656c6c6f206f6f6f6f6f6f6f6f6f6f6f6f6f6f6f60581b815250610c1b565b7f56f074d292557f2e3c567d982816e0fb5b72100ff196892f8fbd23b8a9073679604051610b21906020808252600b908201526a12195b1b1bc815dbdc9b1960aa1b604082015260600190565b60405180910390a1565b610b4c6040518060600160405280603c8152602001613bcd603c9139610c1b565b6000818152600e602052604090205460ff16610ba857610b986040518060400160405280601581526020017418d85b18dd5b185d1a5b99c81d1a081c995cdd5b1d605a1b815250610c1b565b610ba360028261169f565b610bd3565b610bd36040518060400160405280600a8152602001691a1859081c995cdd5b1d60b21b815250610c1b565b6000818152600c60205260409081902090517fde9a0fa21e2768362f2f416d0c5a00df95d7fc4a6e7c260e6eb437ef666e5d3191610c109161379b565b60405180910390a150565b610c5e81604051602401610c2f9190613644565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261244b565b50565b60005b600754811015610ed4576000604051806040016040528060026005018481548110610c9f57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610cb490613b3a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce090613b3a565b8015610d2d5780601f10610d0257610100808354040283529160200191610d2d565b820191906000526020600020905b815481529060010190602001808311610d1057829003601f168201915b50505050508152602001610eae85600260060160026005018781548110610d6457634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610d7b91906135d5565b9081526020016040518091039020604051806101c0016040529081600082018054610da590613b3a565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd190613b3a565b8015610e1e5780601f10610df357610100808354040283529160200191610e1e565b820191906000526020600020905b815481529060010190602001808311610e0157829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505061246c565b8152509050610ec18184600001516127dc565b5080610ecc81613b6f565b915050610c64565b5050565b60005b600754811015610ed4576000604051806040016040528084600001518152602001611073600260060160026005018681548110610f2857634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051610f3f91906135d5565b9081526020016040518091039020604051806101c0016040529081600082018054610f6990613b3a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9590613b3a565b8015610fe25780601f10610fb757610100808354040283529160200191610fe2565b820191906000526020600020905b815481529060010190602001808311610fc557829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505086612b66565b815250905061113881600260050184815481106110a057634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546110b590613b3a565b80601f01602080910402602001604051908101604052809291908181526020018280546110e190613b3a565b801561112e5780601f106111035761010080835404028352916020019161112e565b820191906000526020600020905b81548152906001019060200180831161111157829003601f168201915b5050505050612c12565b508061114381613b6f565b915050610edb565b60005b600754811015610ed457600780546000916008918490811061118057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161119791906135d5565b9081526020016040518091039020604051806101c00160405290816000820180546111c190613b3a565b80601f01602080910402602001604051908101604052809291908181526020018280546111ed90613b3a565b801561123a5780601f1061120f5761010080835404028352916020019161123a565b820191906000526020600020905b81548152906001019060200180831161121d57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152505090506112d18184612fd2565b8151604051600b916112e2916135b9565b9081526040805160209281900383019020865160009081529252902055508061130a81613b6f565b91505061114e565b60005b600454811015610ed4576000604051806040016040528060028001848154811061134f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001611425856002600301600060028001888154811061138d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050612b66565b8152509050611438818460000151612c12565b508061144381613b6f565b915050611315565b60005b600454811015610ed45760006040518060400160405280846000015181526020016115356002600301600060028001878154811061149c57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820154815250508661246c565b81525090506115718160028001848154811061156157634e487b7160e01b600052603260045260246000fd5b90600052602060002001546127dc565b508061157c81613b6f565b91505061144e565b60005b600454811015610ed4576000600260030160006002800184815481106115bd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a82015481525050905061165c8382612fd2565b8351604051600b9161166d916135b9565b90815260408051602092819003830190209351600090815293909152909120558061169781613b6f565b915050611587565b8060005b600584015481101561175a57836008018460050182815481106116d657634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516116ed91906135d5565b908152602001604051809103902054600085600501838154811061172157634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405161173891906135d5565b908152604051908190036020019020558061175281613b6f565b9150506116a3565b5061178060405180604001604052806004815260200163151154d560e21b815250610c1b565b6117ab6040518060400160405280600981526020016803a3ab83632a4a21d160bd1b8152508361309c565b6000600190506000806040518060200160405280600081525090506117f76040518060400160405280601081526020016f7768657265206974206661696c64733f60801b815250610c1b565b6005860154611805906130e1565b6002860154611813906130e1565b60005b6005870154811015611ead57611845604051806060016040528060218152602001613c8c602191398783613126565b600086815260048801602052604090205461185f906130e1565b6000868152600488016020526040902080546118ab91908390811061189457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101546130e1565b600086815260048801602052604081208054839081106118db57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000180546118f790613b3a565b80601f016020809104026020016040519081016040528092919081815260200182805461192390613b3a565b80156119705780601f1061194557610100808354040283529160200191611970565b820191906000526020600020905b81548152906001019060200180831161195357829003601f168201915b505050505090506119a56040518060400160405280600c81526020016b039b2b93b32b92730b6b29d160a51b8152508261316d565b600088600901826040516119b991906135b9565b90815260200160405180910390206000016000898152602001908152602001600020549050611a296040518060400160405280600a81526020016903932b89036b4b8399d160b51b81525082600085604051611a1591906135b9565b908152602001604051809103902054613126565b600082604051611a3991906135b9565b9081526020016040518091039020548111611e985780600083604051611a5f91906135b9565b908152602001604051809103902054611a789190613adc565b600083604051611a8891906135b9565b908152602001604051809103902081905550611af76040518060400160405280601881526020017f6e6577207365727665722071756f74612061667465723a200000000000000000815250600084604051611ae391906135b9565b90815260200160405180910390205461309c565b60008881526001602090815260409091208351611b1692850190613325565b506000955060005b60028a0154811015611bd25760008a60070184604051611b3e91906135b9565b90815260200160405180910390208281548110611b6b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600290920290910154808352600e90915260409091205490915060ff16611bbf57808b600d0185604051611ba991906135b9565b9081526040519081900360200190205550611bd2565b5080611bca81613b6f565b915050611b1e565b50611c0960405180604001604052806015815260200174747279696e6720746f2066696e6420636972636c6560581b815250610c1b565b815b611c3d6040518060400160405280601081526020016f039b2b93b32b92937bab73234b7339d160851b8152508261316d565b89600d0181604051611c4f91906135b9565b908152602001604051809103902054600014611e6157611ca36040518060400160405280601081526020016f03a3ab83632903937bab73234b7339d160851b8152508b600d0183604051611ae391906135b9565b6000600160008c600d0184604051611cbb91906135b9565b90815260200160405180910390205481526020019081526020016000208054611ce390613b3a565b90501115611e6157600160008b600d0183604051611d0191906135b9565b90815260200160405180910390205481526020019081526020016000208054611d2990613b3a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5590613b3a565b8015611da25780601f10611d7757610100808354040283529160200191611da2565b820191906000526020600020905b815481529060010190602001808311611d8557829003601f168201915b50505050509050611dd360405180604001604052806007815260200166636f6d7061726560c81b81525082856131b2565b82604051602001611de491906135b9565b6040516020818303038152906040528051906020012081604051602001611e0b91906135b9565b604051602081830303815290604052805190602001201415611e5c57611e50604051806040016040528060088152602001677761732073616d6560c01b815250610c1b565b60019550829450611e61565b611c0b565b611e906040518060400160405280600d81526020016c03337bab73221b4b931b6329d1609d1b815250876131f9565b505050611ead565b50508080611ea590613b6f565b915050611816565b50811561231557600086600d0182604051611ec891906135b9565b9081526020016040518091039020549050611f176040518060400160405280601e81526020017f41737369676e696e6720666f756e64696e67732068657265203d3d3d3d200000815250610c1b565b6000818152600160209081526040808320600a8b019092529091208154909190611f4090613b3a565b611f4b9291906133a9565b50600b870180546001818101835560009283526020808420909201849055838352600c8a0182526040808420805460ff191690921790915580518082018252601081526f020a9a9a4a3a2a722102a2aa826229d160851b81840152848452600a8b01909252909120805461204892918491611fc590613b3a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff190613b3a565b801561203e5780601f106120135761010080835404028352916020019161203e565b820191906000526020600020905b81548152906001019060200180831161202157829003601f168201915b505050505061323e565b600081815260016020526040808220905160098a0191612067916135d5565b90815260408051918290036020908101832060008b815290825282812054868252600190925291909120909250829160088b01916120a4916135d5565b9081526020016040518091039020546120bd9190613adc565b60008381526001602052604090819020905160088b01916120dd916135d5565b9081526020016040518091039020819055506121e36040518060400160405280600b81526020016a02a32b6b81028baba309d160ad1b81525060016000858152602001908152602001600020805461213490613b3a565b80601f016020809104026020016040519081016040528092919081815260200182805461216090613b3a565b80156121ad5780601f10612182576101008083540402835291602001916121ad565b820191906000526020600020905b81548152906001019060200180831161219057829003601f168201915b50505060008781526001602052604080822090519193506121cf9250906135d5565b908152602001604051809103902054613285565b6122326040518060400160405280600e81526020016d028aaaa209021a420a723a2a21d160951b815250828a60080160016000878152602001908152602001600020604051611a1591906135d5565b8260405160200161224391906135b9565b60408051601f1981840301815282825280516020918201206000868152600183529290922091926122759291016135d5565b6040516020818303038152906040528051906020012014156122d5576122cf6040518060400160405280601881526020017f627265616b696e672074686520636972636c6520686572650000000000000000815250610c1b565b5061230c565b600082815260016020526040908190209051600d8a01916122f5916135d5565b908152602001604051809103902054915050611f17565b505050506123ff565b82156123c6576123596040518060400160405280601a81526020017f205455504c45206e6f742061737369676e656420617420616c6c000000000000815250610c1b565b600b860180546001818101835560009283526020808420909201889055878352600c890182526040808420805460ff19169092179091558051808201825260088152671393d51193d5539160c21b818401908152898552600a8b019093529220915161230c929190613325565b600085815260016020526040908190209051600d8801916123e6916135d5565b90815260200160405180910390205494505050506117ab565b6000818152600c8401602052604090205460ff161561241d57505050565b61243e6040518060600160405280602c8152602001613c34602c9139610c1b565b809150611780565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806002808461018001518661010001516124889190613a9d565b61249291906139ec565b60028561016001518760e001516124a99190613a9d565b6124b391906139ec565b6124bd919061381c565b6124c791906139ec565b905060006126b88286610120015164746a5288006124e591906139fb565b6124ef9190613875565b6124fa90600161381c565b604080517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616818301527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e0820152610100808201909252600160f81b6001600160801b68010000000000000000640100000000620100006010600460026000198c019081041790810417908104178881041790810417908104179081041790810417017e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff0281900460ff039091015104600160ff1b909211020190565b905060008560c00151826126cc9190613a7e565b60408701516126de90620f4240613a7e565b6126e891906138a3565b905060008560a001518760200151620f42406127049190613a7e565b61270e91906138a3565b9050600087608001518284612723919061385d565b61272d91906138a3565b9050600088610140015189610120015160646127499190613a7e565b612753919061385d565b89608001516127629190613a7e565b6101408a01516127729085613a7e565b6101208b01516127829087613a7e565b61278d906064613a7e565b612797919061385d565b6127a191906138a3565b90506000886101a001516103e86127b89190613a7e565b6127c2838561385d565b6127cc919061385d565b9750505050505050505b92915050565b6127fe6040518060600160405280602b8152602001613c09602b91398261309c565b6128356040518060400160405280600c81526020016b0313637b1b59024a723279d160a51b81525083600001518460200151613285565b600081815260066020908152604082208054600181018255908352918190208451805186946002029092019261287092849290910190613325565b506020918201516001918201556000838152600690925260409091205414156128c957610ed4604051806040016040528060158152602001741a5b9a5d1a585b081c1c9a5bdc9a5d1e4818dbdcdd605a1b815250610c1b565b60005b6000828152600660205260409020546128e790600190613adc565b8110156129d6576129746040518060400160405280601a81526020017f696e646578206f6620736572766572207072696f726974793a200000000000008152508260026004016000868152602001908152602001600020848154811061295d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154613126565b60008281526006602052604090208054829081106129a257634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154836020015110156129c4576129d6565b806129ce81613b6f565b9150506128cc565b612a0e60405180604001604052806016815260200175036bab9ba1034b739b2b93a1030ba1034b73232bc1d160551b8152508261309c565b600082815260066020526040812054612a2990600190613adc565b90505b81811115612af7576000838152600660205260409020612a4d600183613adc565b81548110612a6b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600260040160008581526020019081526020016000208281548110612aae57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000820181600001908054612ad090613b3a565b612adb9291906133a9565b5060019182015491015580612aef81613b23565b915050612a2c565b506000828152600660205260409020805484919083908110612b2957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000820151816000019080519060200190612b53929190613325565b5060208201518160010155905050505050565b6000806002846101800151846101000151612b819190613a9d565b612b8b91906139ec565b60028561016001518560e00151612ba29190613a9d565b612bac91906139ec565b612bb6919061381c565b90506000612bc3826132cc565b612bcf90610935613a7e565b60a0850151612be0906103e8613a7e565b612bed90620f424061385d565b612bf79190613adc565b6fffffffffffffffffffffffffffffffff1695945050505050565b612c346040518060600160405280602c8152602001613c60602c91398261316d565b612c6b6040518060400160405280600c81526020016b0313637b1b59024a723279d160a51b81525083600001518460200151613126565b604051600990612c7c9083906135b9565b9081526040519081900360209081018220805460018181018355600092835291839020865160029092020190815591850151910155600990612cbf9083906135b9565b9081526040519081900360200190205460011415612d0d57610ed4604051806040016040528060158152602001741a5b9a5d1a585b081c1c9a5bdc9a5d1e4818dbdcdd605a1b815250610c1b565b60005b6001600260070183604051612d2591906135b9565b90815260405190819003602001902054612d3f9190613adc565b811015612e3157612dc06040518060400160405280601a81526020017f696e646578206f6620736572766572207072696f726974793a2000000000000081525082600260070185604051612d9391906135b9565b9081526020016040518091039020848154811061295d57634e487b7160e01b600052603260045260246000fd5b604051600990612dd19084906135b9565b90815260200160405180910390208181548110612dfe57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154836020015110612e1f57612e31565b80612e2981613b6f565b915050612d10565b612e6960405180604001604052806016815260200175036bab9ba1034b739b2b93a1030ba1034b73232bc1d160551b8152508261309c565b60006001600260070184604051612e8091906135b9565b90815260405190819003602001902054612e9a9190613adc565b90505b81811115612f6c57604051600990612eb69085906135b9565b908152604051908190036020019020612ed0600183613adc565b81548110612eee57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600260070184604051612f0f91906135b9565b90815260200160405180910390208281548110612f3c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460029092020190815560019182015491015580612f6481613b23565b915050612e9d565b5082600260070183604051612f8191906135b9565b90815260200160405180910390208281548110612fae57634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050565b600080600280856101800151856101000151612fee9190613a9d565b612ff891906139ec565b60028661016001518660e0015161300f9190613a9d565b61301991906139ec565b613023919061381c565b61302d91906139ec565b9050600061304b8285610120015164746a5288006124e591906139fb565b905060008460c001518261305f9190613a7e565b856040015161306e91906138a3565b905060008186608001516130829190613adc565b866020015161309191906138a3565b979650505050505050565b610ed482826040516024016130b2929190613729565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261244b565b610c5e816040516024016130f791815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b17905261244b565b61244683838360405160240161313e93929190613776565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b17905261244b565b610ed48282604051602401613183929190613682565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261244b565b6124468383836040516024016131ca939291906136b0565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b17905261244b565b610ed4828260405160240161320f92919061365e565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b17905261244b565b6124468383836040516024016132569392919061374b565b60408051601f198184030181529190526020810180516001600160e01b031663a3f5c73960e01b17905261244b565b61244683838360405160240161329d939291906136f3565b60408051601f198184030181529190526020810180516001600160e01b031663f362ca5960e01b17905261244b565b60008060026132dc84600161385d565b6132e691906138a3565b90508291505b8181101561331f5790508060028161330481866138a3565b61330e919061385d565b61331891906138a3565b90506132ec565b50919050565b82805461333190613b3a565b90600052602060002090601f0160209004810192826133535760008555613399565b82601f1061336c57805160ff1916838001178555613399565b82800160010185558215613399579182015b8281111561339957825182559160200191906001019061337e565b506133a5929150613424565b5090565b8280546133b590613b3a565b90600052602060002090601f0160209004810192826133d75760008555613399565b82601f106133e85780548555613399565b8280016001018555821561339957600052602060002091601f016020900482015b82811115613399578254825591600101919060010190613409565b5b808211156133a55760008155600101613425565b600080600080600060a08688031215613450578081fd5b853567ffffffffffffffff80821115613467578283fd5b818801915088601f83011261347a578283fd5b81358181111561348c5761348c613bb6565b604051601f8201601f19908116603f011681019083821181831017156134b4576134b4613bb6565b816040528281528b60208487010111156134cc578586fd5b826020860160208301379182016020908101959095525099928801359850505060408601359560608101359550608001359350915050565b600060208284031215613515578081fd5b5035919050565b60008060008060008060008060008060006101608c8e03121561353d578586fd5b505089359b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0810135965061010081013595506101208101359450610140013592509050565b600081518084526135a5816020860160208601613af3565b601f01601f19169290920160200192915050565b600082516135cb818460208701613af3565b9190910192915050565b60008083546135e381613b3a565b600182811680156135fb576001811461360c57613638565b60ff19841687528287019450613638565b8786526020808720875b8581101561362f5781548a820152908401908201613616565b50505082870194505b50929695505050505050565b602081526000613657602083018461358d565b9392505050565b604081526000613671604083018561358d565b905082151560208301529392505050565b604081526000613695604083018561358d565b82810360208401526136a7818561358d565b95945050505050565b6060815260006136c3606083018661358d565b82810360208401526136d5818661358d565b905082810360408401526136e9818561358d565b9695505050505050565b606081526000613706606083018661358d565b8281036020840152613718818661358d565b915050826040830152949350505050565b60408152600061373c604083018561358d565b90508260208301529392505050565b60608152600061375e606083018661358d565b84602084015282810360408401526136e9818561358d565b606081526000613789606083018661358d565b60208301949094525060400152919050565b600060208083528184546137ae81613b3a565b808487015260406001808416600081146137cf57600181146137e35761380e565b60ff1985168984015260608901955061380e565b898852868820885b858110156138065781548b82018601529083019088016137eb565b8a0184019650505b509398975050505050505050565b600080821280156001600160ff1b038490038513161561383e5761383e613b8a565b600160ff1b839003841281161561385757613857613b8a565b50500190565b6000821982111561387057613870613b8a565b500190565b60008261388457613884613ba0565b600160ff1b82146000198414161561389e5761389e613b8a565b500590565b6000826138b2576138b2613ba0565b500490565b80825b60018086116138c957506138fc565b6001600160ff1b038290048211156138e3576138e3613b8a565b808616156138f057918102915b9490941c9380026138ba565b935093915050565b600082801561391a57600181146139245761392d565b60019150506127d6565b829150506127d6565b508161393b575060006127d6565b506001600082138082146139545780156139735761398d565b6001600160ff1b0383900483111561396e5761396e613b8a565b61398d565b6001600160ff1b0383900583121561398d5761398d613b8a565b50808316156139995750805b6139a98360011c838402836138b7565b600082136001600160ff1b03829004831116156139c8576139c8613b8a565b60008212600160ff1b829005831216156139e4576139e4613b8a565b029392505050565b600061365760ff841683613904565b60006001600160ff1b0381841382841380821686840486111615613a2157613a21613b8a565b600160ff1b84871282811687830589121615613a3f57613a3f613b8a565b858712925087820587128484161615613a5a57613a5a613b8a565b87850587128184161615613a7057613a70613b8a565b505050929093029392505050565b6000816000190483118215151615613a9857613a98613b8a565b500290565b60008083128015600160ff1b850184121615613abb57613abb613b8a565b6001600160ff1b0384018313811615613ad657613ad6613b8a565b50500390565b600082821015613aee57613aee613b8a565b500390565b60005b83811015613b0e578181015183820152602001613af6565b83811115613b1d576000848401525b50505050565b600081613b3257613b32613b8a565b506000190190565b600181811c90821680613b4e57607f821691505b6020821081141561331f57634e487b7160e01b600052602260045260246000fd5b6000600019821415613b8357613b83613b8a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a20524553554c54202a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a262626262620616464696e67206e6577207072696f7269747920626c6f636b20666f72207475706c653a20494e495449414c205455504c4520574153204e4f54204153534947454e44205354415254494e47204f564552262626262620616464696e67206e6577207072696f7269747920626c6f636b20666f72207365727665723a206265666f726520666f72206c6f6f70207475706c65207072696f72697469657320a264697066735822122043418825fcdf7f076e7225fa1b1064d40a4d850c70dcf86fb73631df0a7d326d64736f6c63430008040033";

    public static final String FUNC_TEST = "Test";

    public static final String FUNC_AUCTIONRESULTTUPLE = "auctionResultTuple";

    public static final String FUNC_REGISTERMOBILETASK = "registerMobileTask";

    public static final String FUNC_REGISTERSERVERNODE = "registerServerNode";

    public static final Event AUCTIONTUPLERESULT_EVENT = new Event("AuctionTupleResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGBOOL_EVENT = new Event("DebugBool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DEBUGEVENT_EVENT = new Event("DebugEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUGUINT_EVENT = new Event("DebugUint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MOBILETASKREGISTERED_EVENT = new Event("MobileTaskRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVERNODEREGISTERED_EVENT = new Event("ServerNodeRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuctionManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AuctionTupleResultEventResponse> getAuctionTupleResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, transactionReceipt);
        ArrayList<AuctionTupleResultEventResponse> responses = new ArrayList<AuctionTupleResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionTupleResultEventResponse>() {
            @Override
            public AuctionTupleResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONTUPLERESULT_EVENT, log);
                AuctionTupleResultEventResponse typedResponse = new AuctionTupleResultEventResponse();
                typedResponse.log = log;
                typedResponse.serverName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionTupleResultEventResponse> auctionTupleResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONTUPLERESULT_EVENT));
        return auctionTupleResultEventFlowable(filter);
    }

    public List<DebugBoolEventResponse> getDebugBoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGBOOL_EVENT, transactionReceipt);
        ArrayList<DebugBoolEventResponse> responses = new ArrayList<DebugBoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugBoolEventResponse>() {
            @Override
            public DebugBoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGBOOL_EVENT, log);
                DebugBoolEventResponse typedResponse = new DebugBoolEventResponse();
                typedResponse.log = log;
                typedResponse.bbb = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugBoolEventResponse> debugBoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGBOOL_EVENT));
        return debugBoolEventFlowable(filter);
    }

    public List<DebugEventEventResponse> getDebugEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGEVENT_EVENT, transactionReceipt);
        ArrayList<DebugEventEventResponse> responses = new ArrayList<DebugEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugEventEventResponse typedResponse = new DebugEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugEventEventResponse>() {
            @Override
            public DebugEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGEVENT_EVENT, log);
                DebugEventEventResponse typedResponse = new DebugEventEventResponse();
                typedResponse.log = log;
                typedResponse.text = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugEventEventResponse> debugEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGEVENT_EVENT));
        return debugEventEventFlowable(filter);
    }

    public List<DebugUintEventResponse> getDebugUintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUGUINT_EVENT, transactionReceipt);
        ArrayList<DebugUintEventResponse> responses = new ArrayList<DebugUintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugUintEventResponse typedResponse = new DebugUintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DebugUintEventResponse>() {
            @Override
            public DebugUintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEBUGUINT_EVENT, log);
                DebugUintEventResponse typedResponse = new DebugUintEventResponse();
                typedResponse.log = log;
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DebugUintEventResponse> debugUintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUGUINT_EVENT));
        return debugUintEventFlowable(filter);
    }

    public List<MobileTaskRegisteredEventResponse> getMobileTaskRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, transactionReceipt);
        ArrayList<MobileTaskRegisteredEventResponse> responses = new ArrayList<MobileTaskRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MobileTaskRegisteredEventResponse>() {
            @Override
            public MobileTaskRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MOBILETASKREGISTERED_EVENT, log);
                MobileTaskRegisteredEventResponse typedResponse = new MobileTaskRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MobileTaskRegisteredEventResponse> mobileTaskRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MOBILETASKREGISTERED_EVENT));
        return mobileTaskRegisteredEventFlowable(filter);
    }

    public List<ServerNodeRegisteredEventResponse> getServerNodeRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, transactionReceipt);
        ArrayList<ServerNodeRegisteredEventResponse> responses = new ArrayList<ServerNodeRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServerNodeRegisteredEventResponse>() {
            @Override
            public ServerNodeRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVERNODEREGISTERED_EVENT, log);
                ServerNodeRegisteredEventResponse typedResponse = new ServerNodeRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.biddersCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServerNodeRegisteredEventResponse> serverNodeRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVERNODEREGISTERED_EVENT));
        return serverNodeRegisteredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> Test() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> auctionResultTuple(BigInteger tupleID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUCTIONRESULTTUPLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tupleID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerMobileTask(BigInteger id, BigInteger cpuLength, BigInteger nwLength, BigInteger outputSize, BigInteger deadline, BigInteger offer, BigInteger ueUpBW, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger ueTransmissionPower, BigInteger ueIdlePower) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERMOBILETASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(cpuLength), 
                new org.web3j.abi.datatypes.generated.Uint256(nwLength), 
                new org.web3j.abi.datatypes.generated.Uint256(outputSize), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint256(offer), 
                new org.web3j.abi.datatypes.generated.Uint256(ueUpBW), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(ueTransmissionPower), 
                new org.web3j.abi.datatypes.generated.Uint256(ueIdlePower)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerServerNode(String name, BigInteger mips, BigInteger xCoordinate, BigInteger yCoordinate, BigInteger offer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERSERVERNODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.generated.Uint256(mips), 
                new org.web3j.abi.datatypes.generated.Uint256(xCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(yCoordinate), 
                new org.web3j.abi.datatypes.generated.Uint256(offer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuctionManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuctionManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuctionManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AuctionTupleResultEventResponse extends BaseEventResponse {
        public String serverName;
    }

    public static class DebugBoolEventResponse extends BaseEventResponse {
        public Boolean bbb;
    }

    public static class DebugEventEventResponse extends BaseEventResponse {
        public String text;
    }

    public static class DebugUintEventResponse extends BaseEventResponse {
        public BigInteger number;
    }

    public static class MobileTaskRegisteredEventResponse extends BaseEventResponse {
        public BigInteger id;

        public BigInteger biddersCount;
    }

    public static class ServerNodeRegisteredEventResponse extends BaseEventResponse {
        public String name;

        public BigInteger biddersCount;
    }
}
